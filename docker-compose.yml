version: "3"

services:
  mysql:
    image: mysql:8.0.32
    restart: always
    # volumes:
    #   - dbdata:/var/lib/mysql
    ports:
      - 3309:3306
    cap_add:
      - SYS_NICE
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}

  redis:
    image: redis:alpine
    container_name: redis_boot
    hostname: redis_boot
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
      # 컨테이너에 docker label을 이용해서 메타데이터 추가
    labels:
      - "name=redis"
      - "mode=standalone"
    ports:
      - 6379:6379
    # 컨테이너 종료시 재시작 여부 설정
    restart: always
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    container_name: spring-boot
    depends_on:
      - mysql
      - redis
  
  front:
    build:
      context: ./frontend/planto
      dockerfile: Dockerfile
    container_name: "nginx-react"
    ports:
      - 3000:3000
    
  mosquitto:
    restart: always
    image: "eclipse-mosquitto"
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./eclipse-mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./eclipse-mosquitto/data:/mosquitto/data
      - ./eclipse-mosquitto/log:/mosquitto/log
      # - /${USER_DIR}/${MOSQUITTO_DIR}/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      # - /${USER_DIR}/${MOSQUITTO_DIR}/data:/mosquitto/data
      # - /${USER_DIR}/${MOSQUITTO_DIR}/log:/mosquitto/log

  my-jenkins:
    image: jenkins/jenkins:lts
    container_name: "my-jenkins"
    ports:
      - 9090:8080
      - 50000:50000
    volumes:
      - /home/opendocs/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    user: root 

  # nginx:
  #   image: nginx:1.21.5-alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   #   - ./certbot/conf:/etc/letsencrypt  #동일한 디렉토리를 마운트
  #   #   - ./certbot/www:/var/www/certbot
  #   # command : "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  #   container_name: myweb-proxy
  #   depends_on:
  #     - backend
  #     - front

  # nginx:
  #   build: ./nginx
  #   container_name: nginx
  #   ports:
  #       - "80:80"
  #       - "443:443"  # nginx에 443 포트 추가
  #   restart: "on-failure"
  #   volumes: 
  #       # - ./nginx/nginx.conf:/etc/nginx/conf.d
  #       - build_folder:/var/www/Frontend
  #       - ./certbot/conf:/etc/letsencrypt  #동일한 디렉토리를 마운트
  #       - ./certbot/www:/var/www/certbot
  #   command : "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  #   depends_on:
  #     - backend
  #     - front

  # certbot:  #certbot 컨테이너 추가 
  #     image: certbot/certbot
  #     restart: unless-stopped
  #     container_name: certbot
  #     volumes: 
  #         - ./certbot/conf:/etc/letsencrypt    #nginx컨테이너에 certbot컨테이너 연결
  #         - ./certbot/www:/var/www/certbot
  #     depends_on:
  #         - nginx
  #     entrypoint : "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
      